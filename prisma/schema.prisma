// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  sizes       String[]
  colors      String[]
  categoryId  String
  isActive    Boolean     @default(true)  // Add this field
  category    Category    @relation(fields: [categoryId], references: [id])
  items       OrderItem[] // Changed from orderItems to items
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Order {
  id            String      @id @default(cuid())
  customerName  String
  customerEmail String
  customerPhone String?
  address       String
  status        OrderStatus @default(PENDING)
  totalPrice    Float
  items         OrderItem[] // Changed from orderItems to items
  payment       Payment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  paypalOrderId String        @unique
  paypalPayerId String?
  status        PaymentStatus @default(PENDING)
  amount        Float
  currency      String        @default("USD")
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ShippingCost {
  id        String   @id @default(cuid())
  cost      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
